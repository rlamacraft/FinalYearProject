var _user$project$Maing$parseText = _elm_lang$core$Native_Platform.outgoingPort(
	'parseText',
	function (v) {
		return v;
	});
var _user$project$Maing$update = F2(
	function (msg, model) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'EditText':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{text: _p0._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'ParseText':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _user$project$Maing$parseText(model.text)
				};
			default:
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							data: _user$project$ParsingHandling$buildStatementTree(_p0._0)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
		}
	});
var _user$project$Maing$parsedData = _elm_lang$core$Native_Platform.incomingPort('parsedData', _elm_lang$core$Json_Decode$string);
var _user$project$Maing$Model = F2(
	function (a, b) {
		return {data: a, text: b};
	});
var _user$project$Maing$init = {
	ctor: '_Tuple2',
	_0: A2(
		_user$project$Maing$Model,
		_elm_lang$core$Native_List.fromArray(
			[]),
		''),
	_1: _elm_lang$core$Platform_Cmd$none
};
var _user$project$Maing$EditText = function (a) {
	return {ctor: 'EditText', _0: a};
};
var _user$project$Maing$Received = function (a) {
	return {ctor: 'Received', _0: a};
};
var _user$project$Maing$subscriptions = function (model) {
	return _user$project$Maing$parsedData(_user$project$Maing$Received);
};
var _user$project$Maing$ParseText = {ctor: 'ParseText'};
var _user$project$Maing$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$textarea,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Events$onInput(_user$project$Maing$EditText)
					]),
				_elm_lang$core$Native_List.fromArray(
					[])),
				A2(
				_elm_lang$html$Html$button,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Events$onClick(_user$project$Maing$ParseText)
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text('Parse')
					])),
				_elm_lang$html$Html$text(
				_elm_lang$core$Basics$toString(model.data))
			]));
};
var _user$project$Maing$main = {
	main: _elm_lang$html$Html_App$program(
		{init: _user$project$Maing$init, view: _user$project$Maing$view, update: _user$project$Maing$update, subscriptions: _user$project$Maing$subscriptions})
};
