var _user$project$ParsingHandlingTests$processStatement = function () {
	var childCommand = A3(
		_user$project$ParsingHandling$Command,
		'childCommand',
		_elm_lang$core$Native_List.fromArray(
			[]),
		'');
	var simpleStringStatement = _user$project$ParsingHandling$StringStatement('foo');
	return A2(
		_elm_community$elm_test$Test$describe,
		'Tests for processStatement',
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_community$elm_test$Test$test,
				'Simple String',
				function (_p0) {
					var _p1 = _p0;
					return A2(
						_elm_community$elm_test$Expect$equal,
						simpleStringStatement,
						A3(
							_user$project$ParsingHandling$processStatement,
							'_string',
							_elm_lang$core$Native_List.fromArray(
								[]),
							'foo'));
				}),
				A2(
				_elm_community$elm_test$Test$test,
				'Empty String',
				function (_p2) {
					var _p3 = _p2;
					return A2(
						_elm_community$elm_test$Expect$equal,
						_user$project$ParsingHandling$StringStatement(''),
						A3(
							_user$project$ParsingHandling$processStatement,
							'_string',
							_elm_lang$core$Native_List.fromArray(
								[]),
							''));
				}),
				A2(
				_elm_community$elm_test$Test$test,
				'Simple Component',
				function (_p4) {
					var _p5 = _p4;
					return A2(
						_elm_community$elm_test$Expect$equal,
						A3(
							_user$project$ParsingHandling$Command,
							'componentName',
							_elm_lang$core$Native_List.fromArray(
								[simpleStringStatement]),
							'foo'),
						A3(
							_user$project$ParsingHandling$processStatement,
							'componentName',
							_elm_lang$core$Native_List.fromArray(
								[simpleStringStatement]),
							'foo'));
				}),
				A2(
				_elm_community$elm_test$Test$test,
				'Empty Component',
				function (_p6) {
					var _p7 = _p6;
					return A2(
						_elm_community$elm_test$Expect$equal,
						A3(
							_user$project$ParsingHandling$Command,
							'componentName',
							_elm_lang$core$Native_List.fromArray(
								[]),
							''),
						A3(
							_user$project$ParsingHandling$processStatement,
							'componentName',
							_elm_lang$core$Native_List.fromArray(
								[]),
							''));
				}),
				A2(
				_elm_community$elm_test$Test$test,
				'Nested Components',
				function (_p8) {
					var _p9 = _p8;
					return A2(
						_elm_community$elm_test$Expect$equal,
						A3(
							_user$project$ParsingHandling$Command,
							'parentComponent',
							_elm_lang$core$Native_List.fromArray(
								[childCommand]),
							''),
						A3(
							_user$project$ParsingHandling$processStatement,
							'parentComponent',
							_elm_lang$core$Native_List.fromArray(
								[childCommand]),
							''));
				}),
				A2(
				_elm_community$elm_test$Test$test,
				'Concatenated Raw Content',
				function (_p10) {
					var _p11 = _p10;
					return A2(
						_elm_community$elm_test$Expect$equal,
						A3(
							_user$project$ParsingHandling$Command,
							'parentComponent',
							_elm_lang$core$Native_List.fromArray(
								[simpleStringStatement, simpleStringStatement]),
							'foo\nfoo'),
						A3(
							_user$project$ParsingHandling$processStatement,
							'parentComponent',
							_elm_lang$core$Native_List.fromArray(
								[simpleStringStatement, simpleStringStatement]),
							'foo\nfoo'));
				})
			]));
}();
