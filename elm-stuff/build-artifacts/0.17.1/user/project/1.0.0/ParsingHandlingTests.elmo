var _user$project$ParsingHandlingTests$buildStatementTree = function () {
	var simpleCommand = A3(
		_user$project$ParsingHandling$Command,
		'a',
		_elm_lang$core$Native_List.fromArray(
			[
				_user$project$ParsingHandling$StringStatement('b')
			]),
		'b');
	var simpleStringStatement = _user$project$ParsingHandling$StringStatement('foo\n');
	return A2(
		_elm_community$elm_test$Test$describe,
		'Tests for buildStatementTree',
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_community$elm_test$Test$test,
				'Empty String',
				function (_p0) {
					var _p1 = _p0;
					return A2(
						_elm_community$elm_test$Expect$equal,
						_elm_lang$core$Result$Err('Could not decode JSON string from parser: Given an invalid JSON: Unexpected end of input'),
						_user$project$ParsingHandling$buildStatementTree(''));
				}),
				A2(
				_elm_community$elm_test$Test$test,
				'Empty Array',
				function (_p2) {
					var _p3 = _p2;
					return A2(
						_elm_community$elm_test$Expect$equal,
						_elm_lang$core$Result$Ok(
							_elm_lang$core$Native_List.fromArray(
								[])),
						_user$project$ParsingHandling$buildStatementTree('[]'));
				}),
				A2(
				_elm_community$elm_test$Test$test,
				'Simple String',
				function (_p4) {
					var _p5 = _p4;
					return A2(
						_elm_community$elm_test$Expect$equal,
						_elm_lang$core$Result$Ok(
							_elm_lang$core$Native_List.fromArray(
								[simpleStringStatement])),
						_user$project$ParsingHandling$buildStatementTree('[{\"name\":\"_string\",\"content\":[],\"rawContent\":\"foo\\n\"}]'));
				}),
				A2(
				_elm_community$elm_test$Test$test,
				'Simple Command',
				function (_p6) {
					var _p7 = _p6;
					return A2(
						_elm_community$elm_test$Expect$equal,
						_elm_lang$core$Result$Ok(
							_elm_lang$core$Native_List.fromArray(
								[simpleCommand])),
						_user$project$ParsingHandling$buildStatementTree('[{\"name\":\"a\",\"content\":[{\"name\":\"_string\",\"content\":[],\"rawContent\":\"b\"}],\"rawContent\":\"b\"}]'));
				}),
				A2(
				_elm_community$elm_test$Test$test,
				'No Name',
				function (_p8) {
					var _p9 = _p8;
					return A2(
						_elm_community$elm_test$Expect$equal,
						_elm_lang$core$Result$Err('Could not decode JSON string from parser: Expecting an object with a field named `name` at _[0] but instead got: {\"content\":[{\"name\":\"_string\",\"content\":[],\"rawContent\":\"b\"}],\"rawContent\":\"b\"}'),
						_user$project$ParsingHandling$buildStatementTree('[{\"content\":[{\"name\":\"_string\",\"content\":[],\"rawContent\":\"b\"}],\"rawContent\":\"b\"}]'));
				}),
				A2(
				_elm_community$elm_test$Test$test,
				'No content',
				function (_p10) {
					var _p11 = _p10;
					return A2(
						_elm_community$elm_test$Expect$equal,
						_elm_lang$core$Result$Err('Could not decode JSON string from parser: Expecting an object with a field named `content` at _[0] but instead got: {\"name\":\"a\",\"rawContent\":\"b\"}'),
						_user$project$ParsingHandling$buildStatementTree('[{\"name\":\"a\",\"rawContent\":\"b\"}]'));
				}),
				A2(
				_elm_community$elm_test$Test$test,
				'No raw content',
				function (_p12) {
					var _p13 = _p12;
					return A2(
						_elm_community$elm_test$Expect$equal,
						_elm_lang$core$Result$Err('Could not decode JSON string from parser: Expecting an object with a field named `rawContent` at _[0] but instead got: {\"name\":\"a\",\"content\":[{\"name\":\"_string\",\"content\":[],\"rawContent\":\"b\"}]}'),
						_user$project$ParsingHandling$buildStatementTree('[{\"name\":\"a\",\"content\":[{\"name\":\"_string\",\"content\":[],\"rawContent\":\"b\"}]}]'));
				})
			]));
}();
var _user$project$ParsingHandlingTests$processStatement = function () {
	var childCommand = A3(
		_user$project$ParsingHandling$Command,
		'childCommand',
		_elm_lang$core$Native_List.fromArray(
			[]),
		'');
	var simpleStringStatement = _user$project$ParsingHandling$StringStatement('foo');
	return A2(
		_elm_community$elm_test$Test$describe,
		'Tests for processStatement',
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_community$elm_test$Test$test,
				'Simple String',
				function (_p14) {
					var _p15 = _p14;
					return A2(
						_elm_community$elm_test$Expect$equal,
						simpleStringStatement,
						A3(
							_user$project$ParsingHandling$processStatement,
							'_string',
							_elm_lang$core$Native_List.fromArray(
								[]),
							'foo'));
				}),
				A2(
				_elm_community$elm_test$Test$test,
				'Empty String',
				function (_p16) {
					var _p17 = _p16;
					return A2(
						_elm_community$elm_test$Expect$equal,
						_user$project$ParsingHandling$StringStatement(''),
						A3(
							_user$project$ParsingHandling$processStatement,
							'_string',
							_elm_lang$core$Native_List.fromArray(
								[]),
							''));
				}),
				A2(
				_elm_community$elm_test$Test$test,
				'Simple Component',
				function (_p18) {
					var _p19 = _p18;
					return A2(
						_elm_community$elm_test$Expect$equal,
						A3(
							_user$project$ParsingHandling$Command,
							'componentName',
							_elm_lang$core$Native_List.fromArray(
								[simpleStringStatement]),
							'foo'),
						A3(
							_user$project$ParsingHandling$processStatement,
							'componentName',
							_elm_lang$core$Native_List.fromArray(
								[simpleStringStatement]),
							'foo'));
				}),
				A2(
				_elm_community$elm_test$Test$test,
				'Empty Component',
				function (_p20) {
					var _p21 = _p20;
					return A2(
						_elm_community$elm_test$Expect$equal,
						A3(
							_user$project$ParsingHandling$Command,
							'componentName',
							_elm_lang$core$Native_List.fromArray(
								[]),
							''),
						A3(
							_user$project$ParsingHandling$processStatement,
							'componentName',
							_elm_lang$core$Native_List.fromArray(
								[]),
							''));
				}),
				A2(
				_elm_community$elm_test$Test$test,
				'Nested Components',
				function (_p22) {
					var _p23 = _p22;
					return A2(
						_elm_community$elm_test$Expect$equal,
						A3(
							_user$project$ParsingHandling$Command,
							'parentComponent',
							_elm_lang$core$Native_List.fromArray(
								[childCommand]),
							''),
						A3(
							_user$project$ParsingHandling$processStatement,
							'parentComponent',
							_elm_lang$core$Native_List.fromArray(
								[childCommand]),
							''));
				})
			]));
}();
var _user$project$ParsingHandlingTests$all = A2(
	_elm_community$elm_test$Test$describe,
	'All Parsing Handling Tests',
	_elm_lang$core$Native_List.fromArray(
		[_user$project$ParsingHandlingTests$processStatement, _user$project$ParsingHandlingTests$buildStatementTree]));
